/*

  Misc helper functions used in the main Open Gamma Detector sketch.

  2023, NuclearPhoenix. Open Gamma Project.
  https://github.com/OpenGammaProject/Open-Gamma-Detector

*/

#ifndef HELPER_H
#define HELPER_H

#include <Arduino.h>  // Needed for Serial, String and uint data types

void cleanPrintln(const String &text = String(""));
void cleanPrintln(unsigned int number, int base = DEC);
void cleanPrint(const String &text = String(""));
void cleanPrint(unsigned int number, int base = DEC);

void print(String text = "", bool error = false);
void print(unsigned int number, bool error = false);
void println(String text = "", bool error = false);
void println(unsigned int number, bool error = false);

// opengamma_pcb, 32x32 px
const uint8_t opengamma_pcb[] = {
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x80, 0x00,
  0x00, 0x01, 0x80, 0x00,
  0x00, 0x03, 0xc0, 0x00,
  0x00, 0x07, 0xe0, 0x00,
  0x00, 0x06, 0x60, 0x00,
  0x00, 0x0c, 0x30, 0x00,
  0x00, 0x0c, 0x30, 0x00,
  0x00, 0x18, 0x18, 0x00,
  0x00, 0x18, 0x18, 0x00,
  0x00, 0x30, 0x0c, 0x00,
  0x00, 0x60, 0x06, 0x00,
  0x00, 0x68, 0x16, 0x00,
  0x00, 0xdc, 0x33, 0x00,
  0x00, 0xd6, 0x33, 0x00,
  0x01, 0x92, 0x31, 0x80,
  0x01, 0x82, 0x21, 0x80,
  0x03, 0x01, 0x60, 0xc0,
  0x06, 0x01, 0x40, 0x60,
  0x06, 0x00, 0x00, 0x60,
  0x0c, 0x00, 0x80, 0x30,
  0x0c, 0x00, 0x80, 0x30,
  0x18, 0x01, 0x80, 0x18, 
  0x38, 0x01, 0x80, 0x1c,
  0x30, 0x01, 0x80, 0x0c,
  0x60, 0x01, 0x80, 0x06,
  0x60, 0x01, 0x80, 0x06,
  0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

const uint8_t radiation_symbol[] = {
/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'radiation_32x32.png'
 */
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0xC0,0x03,0x00,
  0x01,0xE0,0x07,0x80,
  0x03,0xE0,0x07,0xC0,
  0x07,0xF0,0x0F,0xE0,
  0x0F,0xF0,0x0F,0xF0,
  0x0F,0xF8,0x1F,0xF0,
  0x0F,0xF8,0x1F,0xF0,
  0x1F,0xFC,0x3F,0xF8,
  0x1F,0xF8,0x1F,0xF8,
  0x1F,0xF3,0xCF,0xF8,
  0x1F,0xF3,0xCF,0xF8,
  0x00,0x03,0xC0,0x00,
  0x00,0x03,0xC0,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x07,0xE0,0x00,
  0x00,0x07,0xE0,0x00,
  0x00,0x0F,0xF0,0x00,
  0x00,0x0F,0xF0,0x00,
  0x00,0x1F,0xF8,0x00,
  0x00,0x1F,0xF8,0x00,
  0x00,0x3F,0xFC,0x00,
  0x00,0x3F,0xFC,0x00,
  0x00,0x0F,0xF0,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00
};

// play_solid, 6x8 px
const uint8_t play_solid[] = {
  0x00, 0xe0, 0xf0, 0xfc, 0xfc, 0xf0, 0xe0, 0x00
};

// bolt-solid, 9 , 10 px
const uint8_t bolt[] PROGMEM = {
  0x06,
  0x00,
  0x0c,
  0x00,
  0x1c,
  0x00,
  0x38,
  0x00,
  0x7f,
  0x00,
  0x1e,
  0x00,
  0x1c,
  0x00,
  0x38,
  0x00,
  0x30,
  0x00,
  0x20,
  0x00
};


// battery-three-quarters-solid, 16 , 6 px
const uint8_t battery_three_quarters[] PROGMEM = {
  0x7F, 0xFE, // B01111111, B11111110
  0x80, 0x01, // B10000000, B00000001
  0xBF, 0xC1, // B10111111, B11000001
  0xBF, 0xC1, // B10111111, B11000001
  0x80, 0x01, // B10000000, B00000001
  0x7F, 0xFE, // B01111111, B11111110
};

// battery-quarter-solid, 16 , 6 px
const uint8_t battery_quarter[] PROGMEM = {
  0x7F, 0xFE, // B01111111, B11111110
  0x80, 0x01, // B10000000, B00000001
  0x9C, 0x01, // B10011100, B00000001
  0x9C, 0x01, // B10011100, B00000001
  0x80, 0x01, // B10000000, B00000001
  0x7F, 0xFE, // B01111111, B11111110
};

// battery-half-solid, 16 , 6 px
const uint8_t battery_half[] PROGMEM = {
  0x7F, 0xFE, // B01111111, B11111110
  0x80, 0x01, // B10000000, B00000001
  0xBF, 0x01, // B10111111, B00000001
  0xBF, 0x01, // B10111111, B00000001
  0x80, 0x01, // B10000000, B00000001
  0x7F, 0xFE, // B01111111, B11111110
};

// battery-full-solid, 16 , 10 px
const uint8_t battery_full[] PROGMEM = {
  0x7F, 0xFE, // B01111111, B11111110
  0x80, 0x01, // B10000000, B00000001
  0xBF, 0xFD, // B10111111, B11111101
  0xBF, 0xFD, // B10111111, B11111101
  0x80, 0x01, // B10000000, B00000001
  0x7F, 0xFE, // B01111111, B11111110
};

// battery-full-solid, 16 , 10 px
const uint8_t battery_empty[] PROGMEM = {
  0x7F, 0xFE, // B01111111, B11111110
  0x80, 0x01, // B10000000, B00000001
  0x80, 0x01, // B10000000, B00000001
  0x80, 0x01, // B10000000, B00000001
  0x80, 0x01, // B10000000, B00000001
  0x7F, 0xFE, // B01111111, B11111110
};
// // Crossed Circle symbol, 8x8 px
// const uint8_t deadtime_symbol[] PROGMEM = {
//   B00111100,
//   B01000010,
//   B01100110,
//   B01011010,
//   B01011010,
//   B01100110,
//   B01000010,
//   B00111100
// };

#endif  // HELPER_H
